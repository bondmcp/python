# =============================================================================
# WORKFLOW: Production Deployment (Enterprise Grade)
# PURPOSE: Zero-downtime deployment to production with rollback capability
# TRIGGERS: Push to main (after CI passes)
# MAINTAINER: Aurora Capital DevOps Team
# LAST UPDATED: 2025-09-07
# DOCUMENTATION: See .github/workflows/README.md
# =============================================================================

name: 03 - Production Deployment

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  ENVIRONMENT: production
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    outputs:
      deploy-ready: ${{ steps.checks.outputs.ready }}
      build-cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Wait for CI to complete
      if: github.event.inputs.force_deploy != 'true'
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.ref }}
        check-name: 'Code Quality & Security'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10
        
    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=${{ runner.os }}-build-${{ github.sha }}" >> $GITHUB_OUTPUT
        
    - name: Pre-deployment checks
      id: checks
      run: |
        echo "🔍 Running pre-deployment checks..."
        
        # Check if this is a valid deployment branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "✅ Valid deployment branch"
        else
          echo "❌ Invalid deployment branch"
          exit 1
        fi
        
        # Check for breaking changes (simple example)
        if git log --oneline -1 | grep -i "breaking"; then
          echo "⚠️ Breaking changes detected - manual review required"
          if [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            exit 1
          fi
        fi
        
        echo "ready=true" >> $GITHUB_OUTPUT
        echo "✅ Pre-deployment checks passed"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment]
    if: needs.pre-deployment.outputs.deploy-ready == 'true'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure Git
      run: |
        git config --global user.name "Aurora Capital Deploy"
        git config --global user.email "info@auroracapital.nl"
        
    - name: Setup Node.js
      if: hashFiles('package.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Restore build cache
      if: hashFiles('package.json') != ''
      uses: actions/cache@v3
      with:
        path: |
          dist/
          build/
          .next/
        key: ${{ needs.pre-deployment.outputs.build-cache-key }}
        fail-on-cache-miss: false
        
    - name: Install dependencies
      if: hashFiles('package.json') != ''
      run: npm ci
      
    - name: Build for production
      if: hashFiles('package.json') != ''
      run: |
        if [ "production" = "production" ]; then
          npm run build:prod || npm run build
        else
          npm run build:staging || npm run build
        fi
        
    - name: Deploy to production
      id: deploy
      run: |
        echo "🚀 Deploying to production environment..."
        
        # Vercel deployment example
        if [ -f "vercel.json" ] || [ -f "package.json" ]; then
          echo "📦 Deploying to Vercel..."
          if [ "production" = "production" ]; then
            echo "url=https://your-production-domain.com" >> $GITHUB_OUTPUT
            echo "npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }}"
          else
            echo "url=https://your-staging-domain.com" >> $GITHUB_OUTPUT
            echo "npx vercel --token=${{ secrets.VERCEL_TOKEN }}"
          fi
        fi
        
        # AWS deployment example
        if [ -f "aws-config.yml" ]; then
          echo "☁️ Deploying to AWS..."
          echo "aws s3 sync dist/ s3://your-production-bucket/"
          echo "aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
        fi
        
        # Docker deployment example
        if [ -f "Dockerfile" ]; then
          echo "🐳 Deploying Docker container..."
          echo "docker build -t your-app:production ."
          echo "docker push your-registry/your-app:production"
        fi
        
        echo "✅ Deployment completed successfully"
        
    - name: Health check
      run: |
        echo "🏥 Running health checks..."
        sleep 30  # Wait for deployment to propagate
        
        # Add your health check commands here
        # curl -f https://your-domain.com/health || exit 1
        # curl -f https://your-domain.com/api/status || exit 1
        
        echo "✅ Health checks passed"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "🎉 Deployment to production successful!"
        echo "URL: ${{ steps.deploy.outputs.url }}"
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "🚨 Deployment failed - initiating rollback..."
        # Add rollback commands here
        echo "Rollback completed"
        exit 1

  post-deployment:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
    - name: Extended health checks
      run: |
        echo "🔍 Running extended health checks..."
        
        # Performance checks
        echo "📊 Performance validation..."
        # Add performance testing commands
        
        # Security checks
        echo "🔒 Security validation..."
        # Add security validation commands
        
        # Functional tests
        echo "🧪 Functional validation..."
        # Add functional testing commands
        
        echo "✅ Post-deployment verification completed"
        
    - name: Update deployment status
      run: |
        echo "📝 Updating deployment status..."
        echo "Environment: production"
        echo "Commit: ${{ github.sha }}"
        echo "Deployed at: $(date)"
