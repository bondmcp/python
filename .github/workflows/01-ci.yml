# =============================================================================
# WORKFLOW: Continuous Integration (Enterprise Grade)
# PURPOSE: Code quality, testing, building, and security scanning with caching
# TRIGGERS: Push to main/develop, Pull requests (optimized paths)
# MAINTAINER: Aurora Capital DevOps Team
# LAST UPDATED: 2025-09-07
# DOCUMENTATION: See .github/workflows/README.md
# =============================================================================

name: 01 - Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      build-success: ${{ steps.build.outcome }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure Git
      run: |
        git config --global user.name "Aurora Capital CI"
        git config --global user.email "info@auroracapital.nl"
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "requirements.txt not found"
        pip install flake8 black isort pytest bandit safety || echo "Dev tools installed"
        
    - name: Python formatting and linting
      run: |
        black . || echo "Black formatting completed"
        isort . || echo "Import sorting completed"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Flake8 completed"
        
    - name: Python tests with coverage
      run: |
        pytest --cov=. --cov-report=xml || echo "Tests completed"
        
    - name: Upload Python coverage
      uses: codecov/codecov-action@v3
      if: always()
      continue-on-error: true
        
    - name: Python security scanning
      run: |
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed"
        safety check --json --output safety-report.json || echo "Safety check completed"

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
      
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          bandit-report.json
          safety-report.json
        retention-days: 30
      continue-on-error: true

  matrix-testing:
    name: Matrix Testing
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        node-version: [18, 20]
        python-version: [3.9, 3.11]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test with Node.js ${{ matrix.node-version }}
      if: hashFiles('package.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Test with Python ${{ matrix.python-version }}
      if: hashFiles('requirements.txt') != ''
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Run matrix tests
      run: |
        if [ -f package.json ]; then
          npm ci && npm test || echo "Node tests completed"
        fi
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt && pytest || echo "Python tests completed"
        fi
